library(dplyr)
library(ggplot2)
library(tidyr)
library(caret)
library(doParallel)
cl <- makeCluster(detectCores()-4)
registerDoParallel(cl)
set.seed(1234)
setwd("C:/Users/nigel/Desktop/kaggle competition/playground1/data")
data<-read.csv("C:/Users/nigel/Desktop/kaggle competition/playground1/data/train.csv")
#cor
cor(data)
#cor
dara%>%cor()
#cor
data%>%cor()
#cor
data.frame(data)%>%cor()
#cor
data.frame(na.omit(data))%>%cor()
#cor
library(corrplot)
data.frame(na.omit(data))%>%cor()
data.frame(na.omit(data))%>%cor(Failture)
View(data)
data.frame(na.omit(data))%>%cor(failture)
data.frame(na.omit(data))%>%cor(na.omit(data)$failture)
View(data)
cor(data$failture)
cor(data)
?cor()
cor(data[,3:])
cor(data[,3:26])
na.omit(data[,3:26])%>%cor()
na.omit(data[,3:26])%>%cor()%>%corrplot()
pdf(file = "cor.pdf",
width = 4, # The width of the plot in inches
height = 4) # The height of the plot in inches
na.omit(data[,3:26])%>%cor()%>%corrplot()
dev.off()
cortable<-data.frame(na.omit(data[,3:26])%>%cor())
write.csv(cortable,"cor.csv")
#查看缺失值情况
na.table<-data.frame(data[0,])#获取列名
for (i in 1:ncol(data)){
na.table[1,i]=sum(is.na(data[,i]))
}
View(na.table)
na.table<-gather(na.table,key=variable,value=num)#转换为长数据
na.table$num<-as.integer(na.table$num)
na.table<-mutate(na.table,proportion=na.table$num/nrow(ig.data))
na.table<-mutate(na.table,proportion=na.table$num/nrow(data))
View(na.table)
write.csv(na.table,"缺失值占比.csv")
naomit<-na.omit(data)
?write.csv()
write.csv(naomit,"data_omit.csv",row.names=F)
naomit[which(naomit$product_code=='A').arr.ind=T]<-0
naomit[which(naomit$product_code=='A'),arr.ind=T]<-0
naomit[which(naomit$product_code=='A',arr.ind=T)]<-0
View(naomit)
naomit<-na.omit(data)
naomit[which(naomit$product_code=='A')]<-0
View(naomit)
naomit<-na.omit(data)
naomit$product_code[which(naomit$product_code=='A')]<-0
View(naomit)
naomit$product_code[which(naomit$product_code=='B']<-1
naomit$product_code[which(naomit$product_code=='D')]<-3
naomit$product_code[which(naomit$product_code=='B')]<-1
naomit$product_code[which(naomit$product_code=='C')]<-2
naomit$product_code[which(naomit$product_code=='D')]<-3
naomit$product_code[which(naomit$product_code=='E')]<-4
View(naomit)
write.csv(naomit[,2:26],"data_omit.csv",row.names=F)
write.csv(naomit[,2:10],"data_omit.csv",row.names=F)
write.csv(naomit[,20:26],"data_omit.csv",row.names=F)
write.csv(naomit[,2:26],"data_omit.csv",row.names=F)
View(data)
View(naomit)
View(naomit)
control<-rfeControl(functions = nbFuncs,method="repeatedcv",repeats=5,number=10,allowParallel=T)
set.seed(1234)
naomit[,c(-1,-26)]
rfe.result<-rfe(naomit[,c(-1,-26)],factor(naomit$failure),c(1:naomit[,c(-1,-26)]),rfeControl=control)#还是用这个
c(1:naomit[,c(-1,-26)])
rfe.result<-rfe(naomit[,c(-1,-26)],factor(naomit$failure),c(1:ncol(naomit[,c(-1,-26)])),rfeControl=control)#还是用这个
factor(naomit$failure)
naomit[,c(-1,-26)]
numeric(naomit[,c(-1,-26)])
as.numeric(naomit[,c(-1,-26)])
summary(naomit[,c(-1,-26)])
naomit<-na.omit(data)
naomit$product_code[which(naomit$product_code=='A')]<-numeric(0)
naomit<-na.omit(data)
naomit$product_code[which(naomit$product_code=='A')]<-as.numeric(0)
View(naomit)
naomit$product_code[which(naomit$product_code=='B')]<-as.numeric(1)
naomit$product_code[which(naomit$product_code=='C')]<-as.numeric(2)
naomit$product_code[which(naomit$product_code=='D')]<-as.numeric(3)
naomit$product_code[which(naomit$product_code=='E')]<-as.numeric(4)
View(naomit)
naomit$product_code<-as.numeric(naomit$product_code)
View(naomit)
rfe.result<-rfe(naomit[,c(-1,-26)],factor(naomit$failure),c(1:ncol(naomit[,c(-1,-26)])),rfeControl=control)#还是用这个
rfe.result
#select feature
feature<-predictors(rfe.result)
feature
naomit[,feature]
write.csv(naomit[,feature],"data_omit.csv",row.names=F)
write.csv(naomit[,c(feature,'failure')],"data_omit.csv",row.names=F)
detectCores()
data1<-naomit[,c(feature,'failure')]
trainIndex <- createDataPartition(data1$failure, p = .7,
list = FALSE,
times = 1)
Train <- data1[ trainIndex,]
Test <- data1[ -trainIndex,]
library(xgboost)
x<-model.matrix(failure~.,Train)
y<-model.frame(failure~.,Train)[,"failure"]
xvals<-model.matrix(failure~.,Test)
yvals<-model.frame(failure~.,Test)[,"failure"]
params <- list(booster = "gbtree", objective = "binary:logistic", eval_metric = "logloss",
eta=0.05, gamma=0, max_depth=3, min_child_weight=1,
subsample=1, colsample_bytree=1)
fit <- xgboost(params = params,
data = x,
label = y,
nrounds = 10)
pre<-predict(fit,xvals,type="res")
performance.nottune<-confusionMatrix(pre,factor(yvals))
pre<-predict(fit,xvals,type="res")
predictions2<-as.factor(ifelse(predict(fit,xvals)>0.5,1,0))
performance.nottune<-confusionMatrix(predictions2,factor(yvals))
performance.nottune
data1<-naomit[,c(2,3,4,26)]
View(naomit)
View(data1)
trainIndex <- createDataPartition(data1$failure, p = .7,
list = FALSE,
times = 1)
Train <- data1[ trainIndex,]
Test <- data1[ -trainIndex,]
x<-model.matrix(failure~.,Train)
y<-model.frame(failure~.,Train)[,"failure"]
xvals<-model.matrix(failure~.,Test)
yvals<-model.frame(failure~.,Test)[,"failure"]
params <- list(booster = "gbtree", objective = "binary:logistic", eval_metric = "logloss",
eta=0.05, gamma=0, max_depth=3, min_child_weight=1,
subsample=1, colsample_bytree=1)
fit <- xgboost(params = params,
data = x,
label = y,
nrounds = 10)
pre<-predict(fit,xvals,type="res")
predictions2<-as.factor(ifelse(predict(fit,xvals)>0.5,1,0))
performance.nottune<-confusionMatrix(predictions2,factor(yvals))
performance.nottune
