eta = 0.4259741,
gamma = 0,
min_child_weight = 4.413045,
subsample = 1,
colsample_bytree=0.81
)
model_list <- caretList(
Survived~., data=Train1,
trControl=train.control,
tuneList=list(xgbTree=caretModelSpec(method="xgbTree", tuneGrid=grid_default,preProcess = c("center","scale")),
svm=caretModelSpec(method="svmLinear",  preProcess = c("center","scale"),tuneGrid=data.frame(svm$bestTune)),
knn=caretModelSpec(method="knn",  preProcess = c("center","scale"),tuneGrid=data.frame(knnFit$bestTune))))
#rf=caretModelSpec(method="rf", tuneGrid=data.frame(rf$bestTune))))
#
#Make a greedy ensemble - currently can only use RMSE
glm_ensemble <- caretStack(
model_list,
method="glm",
metric="Accuracy",
trControl=trainControl(method='cv',
number=10,
savePredictions = "final",
classProbs=TRUE,
index=createResample(Train1$Survived)))
glm_ensemble$models
glm_ensemble$ens_model
glm_ensemble$ens_model$finalModel
confusionMatrix(predict(glm_ensemble,Test1),Test1$Survived)#0.8315
ctest<-read.csv('C:\\Users\\nigel\\Desktop\\titanic\\data\\test.csv',header=T)
x<-ctest
ctest<-ig.data[892:1309,]
ctest$Sex[which(ctest$Sex=="male")]<-1
ctest$Sex[which(ctest$Sex=="female")]<-0
ctest$Sex<-as.numeric(ctest$Sex)
pred<-predict(glm_ensemble ,ctest)
#pred<-predict(svm ,ctest)
result<-cbind(x,pred)
result[which(result$Sex=="male"&result$pred=="Save"),]
nrow(result[which(result$Sex=="male"&result$pred=="Save"),])
nrow(result[which(result$pred=="Die"),])/nrow(result)
result<-result[,c(1,12)]
result$pred<-apply(result,1,function(x){
if(x[2]=="Die"){
x[2]=0
}
else{
x[2]=1
}
}
)
confusionMatrix(factor(result$pred),factor(ans$Survived))
write.csv(result,"result.csv")
grid_default <- expand.grid(
nrounds = 4,
max_depth = 32,
eta = 0.4259741,
gamma = 0,
min_child_weight = 4.413045,
subsample = 1,
colsample_bytree=0.81
)
model_list <- caretList(
Survived~., data=Train1,
trControl=train.control,
tuneList=list(xgbTree=caretModelSpec(method="xgbTree", tuneGrid=grid_default,preProcess = c("center","scale")),
svm=caretModelSpec(method="svmLinear",  preProcess = c("center","scale"),tuneGrid=data.frame(svm$bestTune)),
knn=caretModelSpec(method="knn",  preProcess = c("center","scale"),tuneGrid=data.frame(knnFit$bestTune))))
#rf=caretModelSpec(method="rf", tuneGrid=data.frame(rf$bestTune))))
#
#Make a greedy ensemble - currently can only use RMSE
glm_ensemble <- caretStack(
model_list,
method="glm",
metric="Accuracy",
trControl=trainControl(method='cv',
number=10,
savePredictions = "final",
classProbs=TRUE,
index=createResample(Train1$Survived)))
glm_ensemble$models
glm_ensemble$ens_model
glm_ensemble$ens_model$finalModel
confusionMatrix(predict(glm_ensemble,Test1),Test1$Survived)#0.8315
ctest<-read.csv('C:\\Users\\nigel\\Desktop\\titanic\\data\\test.csv',header=T)
x<-ctest
ctest<-ig.data[892:1309,]
ctest$Sex[which(ctest$Sex=="male")]<-1
ctest$Sex[which(ctest$Sex=="female")]<-0
ctest$Sex<-as.numeric(ctest$Sex)
pred<-predict(glm_ensemble ,ctest)
#pred<-predict(svm ,ctest)
result<-cbind(x,pred)
result[which(result$Sex=="male"&result$pred=="Save"),]
nrow(result[which(result$Sex=="male"&result$pred=="Save"),])
nrow(result[which(result$pred=="Die"),])/nrow(result)
result<-result[,c(1,12)]
result$pred<-apply(result,1,function(x){
if(x[2]=="Die"){
x[2]=0
}
else{
x[2]=1
}
}
)
confusionMatrix(factor(result$pred),factor(ans$Survived))
grid_default <- expand.grid(
nrounds = 20,
max_depth = 32,
eta = 0.4259741,
gamma = 0,
min_child_weight = 4.413045,
subsample = 1,
colsample_bytree=0.81
)
model_list <- caretList(
Survived~., data=Train1,
trControl=train.control,
tuneList=list(xgbTree=caretModelSpec(method="xgbTree", tuneGrid=grid_default,preProcess = c("center","scale")),
svm=caretModelSpec(method="svmLinear",  preProcess = c("center","scale"),tuneGrid=data.frame(svm$bestTune)),
knn=caretModelSpec(method="knn",  preProcess = c("center","scale"),tuneGrid=data.frame(knnFit$bestTune))))
#rf=caretModelSpec(method="rf", tuneGrid=data.frame(rf$bestTune))))
#
#Make a greedy ensemble - currently can only use RMSE
glm_ensemble <- caretStack(
model_list,
method="glm",
metric="Accuracy",
trControl=trainControl(method='cv',
number=10,
savePredictions = "final",
classProbs=TRUE,
index=createResample(Train1$Survived)))
glm_ensemble$models
glm_ensemble$ens_model
glm_ensemble$ens_model$finalModel
confusionMatrix(predict(glm_ensemble,Test1),Test1$Survived)#0.8315
ctest<-read.csv('C:\\Users\\nigel\\Desktop\\titanic\\data\\test.csv',header=T)
x<-ctest
ctest<-ig.data[892:1309,]
ctest$Sex[which(ctest$Sex=="male")]<-1
ctest$Sex[which(ctest$Sex=="female")]<-0
ctest$Sex<-as.numeric(ctest$Sex)
pred<-predict(glm_ensemble ,ctest)
#pred<-predict(svm ,ctest)
result<-cbind(x,pred)
result[which(result$Sex=="male"&result$pred=="Save"),]
nrow(result[which(result$Sex=="male"&result$pred=="Save"),])
nrow(result[which(result$pred=="Die"),])/nrow(result)
result<-result[,c(1,12)]
result$pred<-apply(result,1,function(x){
if(x[2]=="Die"){
x[2]=0
}
else{
x[2]=1
}
}
)
confusionMatrix(factor(result$pred),factor(ans$Survived))
write.csv(result,"result.csv")
grid_default <- expand.grid(
nrounds = 30,
max_depth = 32,
eta = 0.4259741,
gamma = 0,
min_child_weight = 4.413045,
subsample = 1,
colsample_bytree=0.81
)
model_list <- caretList(
Survived~., data=Train1,
trControl=train.control,
tuneList=list(xgbTree=caretModelSpec(method="xgbTree", tuneGrid=grid_default,preProcess = c("center","scale")),
svm=caretModelSpec(method="svmLinear",  preProcess = c("center","scale"),tuneGrid=data.frame(svm$bestTune)),
knn=caretModelSpec(method="knn",  preProcess = c("center","scale"),tuneGrid=data.frame(knnFit$bestTune))))
#rf=caretModelSpec(method="rf", tuneGrid=data.frame(rf$bestTune))))
#
#Make a greedy ensemble - currently can only use RMSE
glm_ensemble <- caretStack(
model_list,
method="glm",
metric="Accuracy",
trControl=trainControl(method='cv',
number=10,
savePredictions = "final",
classProbs=TRUE,
index=createResample(Train1$Survived)))
glm_ensemble$models
glm_ensemble$ens_model
glm_ensemble$ens_model$finalModel
confusionMatrix(predict(glm_ensemble,Test1),Test1$Survived)#0.8315
ctest<-read.csv('C:\\Users\\nigel\\Desktop\\titanic\\data\\test.csv',header=T)
x<-ctest
ctest<-ig.data[892:1309,]
ctest$Sex[which(ctest$Sex=="male")]<-1
ctest$Sex[which(ctest$Sex=="female")]<-0
ctest$Sex<-as.numeric(ctest$Sex)
pred<-predict(glm_ensemble ,ctest)
#pred<-predict(svm ,ctest)
result<-cbind(x,pred)
result[which(result$Sex=="male"&result$pred=="Save"),]
nrow(result[which(result$Sex=="male"&result$pred=="Save"),])
nrow(result[which(result$pred=="Die"),])/nrow(result)
result<-result[,c(1,12)]
result$pred<-apply(result,1,function(x){
if(x[2]=="Die"){
x[2]=0
}
else{
x[2]=1
}
}
)
confusionMatrix(factor(result$pred),factor(ans$Survived))
params
xgbcv <- xgb.cv( params = params, data = x,label=y,
nrounds = 2000, nfold = 10, showsd = T,
stratified = T, print_every_n = 1,
early_stop_round = 20, maximize = F,
prediction = T)
x<-model.matrix(Survived~.,Train)#为什么变小了
y<-model.frame(Survived~.,Train)[,"Survived"]
xvals<-model.matrix(Survived~.,Test)
yvals<-model.frame(Survived~.,Test)[,"Survived"]
xgbcv <- xgb.cv( params = params, data = x,label=y,
nrounds = 2000, nfold = 10, showsd = T,
stratified = T, print_every_n = 1,
early_stop_round = 20, maximize = F,
prediction = T)
graph.data<-xgbcv$evaluation_log
#
ggplot()+geom_line(graph.data,mapping=aes(x=iter,y=train_logloss_mean),color='blue')+
geom_line(graph.data,mapping=aes(x=iter,y=test_logloss_mean),color='red')
min(xgbcv$evaluation_log$test_logloss_mean)
numrounds<-min(which(xgbcv$evaluation_log$test_logloss_mean ==
min(xgbcv$evaluation_log$test_logloss_mean)))
grid_default <- expand.grid(
nrounds = 5,
max_depth = 32,
eta = 0.4259741,
gamma = 0,
min_child_weight = 4.413045,
subsample = 1,
colsample_bytree=0.81
)
#default parameters
params <- list(booster = "gbtree", objective = "binary:logistic", eval_metric = "error",
eta=0.4259741, gamma=0, max_depth=32, min_child_weight=4.413045,
subsample=1, colsample_bytree=0.81)
xgbcv <- xgb.cv( params = params, data = x,label=y,
nrounds = 2000, nfold = 10, showsd = T,
stratified = T, print_every_n = 1,
early_stop_round = 20, maximize = F,
prediction = T)
graph.data<-xgbcv$evaluation_log
#
ggplot()+geom_line(graph.data,mapping=aes(x=iter,y=train_error_mean),color='blue')+
geom_line(graph.data,mapping=aes(x=iter,y=test_error_mean),color='red')
min(xgbcv$evaluation_log$test_error_mean)
numrounds<-min(which(xgbcv$evaluation_log$test_error_mean ==
min(xgbcv$evaluation_log$test_error_mean)))
grid_default <- expand.grid(
nrounds = 39,
max_depth = 32,
eta = 0.4259741,
gamma = 0,
min_child_weight = 4.413045,
subsample = 1,
colsample_bytree=0.81
)
model_list <- caretList(
Survived~., data=Train1,
trControl=train.control,
tuneList=list(xgbTree=caretModelSpec(method="xgbTree", tuneGrid=grid_default,preProcess = c("center","scale")),
svm=caretModelSpec(method="svmLinear",  preProcess = c("center","scale"),tuneGrid=data.frame(svm$bestTune)),
knn=caretModelSpec(method="knn",  preProcess = c("center","scale"),tuneGrid=data.frame(knnFit$bestTune))))
#rf=caretModelSpec(method="rf", tuneGrid=data.frame(rf$bestTune))))
#
#Make a greedy ensemble - currently can only use RMSE
glm_ensemble <- caretStack(
model_list,
method="glm",
metric="Accuracy",
trControl=trainControl(method='cv',
number=10,
savePredictions = "final",
classProbs=TRUE,
index=createResample(Train1$Survived)))
glm_ensemble$models
glm_ensemble$ens_model
glm_ensemble$ens_model$finalModel
confusionMatrix(predict(glm_ensemble,Test1),Test1$Survived)#0.8315
#import data
ctest<-read.csv('C:\\Users\\nigel\\Desktop\\titanic\\data\\test.csv',header=T)
x<-ctest
ctest<-ig.data[892:1309,]
ctest$Sex[which(ctest$Sex=="male")]<-1
ctest$Sex[which(ctest$Sex=="female")]<-0
ctest$Sex<-as.numeric(ctest$Sex)
pred<-predict(glm_ensemble ,ctest)
#pred<-predict(svm ,ctest)
result<-cbind(x,pred)
result[which(result$Sex=="male"&result$pred=="Save"),]
nrow(result[which(result$Sex=="male"&result$pred=="Save"),])
nrow(result[which(result$pred=="Die"),])/nrow(result)
result<-result[,c(1,12)]
result$pred<-apply(result,1,function(x){
if(x[2]=="Die"){
x[2]=0
}
else{
x[2]=1
}
}
)
confusionMatrix(factor(result$pred),factor(ans$Survived))
grid_default <- expand.grid(
nrounds = 20,
max_depth = 32,
eta = 0.4259741,
gamma = 0,
min_child_weight = 4.413045,
subsample = 1,
colsample_bytree=0.81
)
model_list <- caretList(
Survived~., data=Train1,
trControl=train.control,
tuneList=list(xgbTree=caretModelSpec(method="xgbTree", tuneGrid=grid_default,preProcess = c("center","scale")),
svm=caretModelSpec(method="svmLinear",  preProcess = c("center","scale"),tuneGrid=data.frame(svm$bestTune)),
knn=caretModelSpec(method="knn",  preProcess = c("center","scale"),tuneGrid=data.frame(knnFit$bestTune))))
#rf=caretModelSpec(method="rf", tuneGrid=data.frame(rf$bestTune))))
#
#Make a greedy ensemble - currently can only use RMSE
glm_ensemble <- caretStack(
model_list,
method="glm",
metric="Accuracy",
trControl=trainControl(method='cv',
number=10,
savePredictions = "final",
classProbs=TRUE,
index=createResample(Train1$Survived)))
glm_ensemble$models
glm_ensemble$ens_model
glm_ensemble$ens_model$finalModel
confusionMatrix(predict(glm_ensemble,Test1),Test1$Survived)#0.8315
ctest<-read.csv('C:\\Users\\nigel\\Desktop\\titanic\\data\\test.csv',header=T)
x<-ctest
ctest<-ig.data[892:1309,]
ctest$Sex[which(ctest$Sex=="male")]<-1
ctest$Sex[which(ctest$Sex=="female")]<-0
ctest$Sex<-as.numeric(ctest$Sex)
pred<-predict(glm_ensemble ,ctest)
#pred<-predict(svm ,ctest)
result<-cbind(x,pred)
result[which(result$Sex=="male"&result$pred=="Save"),]
nrow(result[which(result$Sex=="male"&result$pred=="Save"),])
nrow(result[which(result$pred=="Die"),])/nrow(result)
result<-result[,c(1,12)]
result$pred<-apply(result,1,function(x){
if(x[2]=="Die"){
x[2]=0
}
else{
x[2]=1
}
}
)
confusionMatrix(factor(result$pred),factor(ans$Survived))
ctest<-read.csv('C:\\Users\\nigel\\Desktop\\titanic\\data\\test.csv',header=T)
x<-ctest
ctest<-ig.data[892:1309,]
ctest$Sex[which(ctest$Sex=="male")]<-1
ctest$Sex[which(ctest$Sex=="female")]<-0
ctest$Sex<-as.numeric(ctest$Sex)
pred<-predict(glm_ensemble ,ctest)
#pred<-predict(svm ,ctest)
result<-cbind(x,pred)
result[which(result$Sex=="male"&result$pred=="Save"),]
nrow(result[which(result$Sex=="male"&result$pred=="Save"),])
nrow(result[which(result$pred=="Die"),])/nrow(result)
result<-result[,c(1,12)]
result$pred<-apply(result,1,function(x){
if(x[2]=="Die"){
x[2]=0
}
else{
x[2]=1
}
}
)
confusionMatrix(factor(result$pred),factor(ans$Survived))
grid_default <- expand.grid(
nrounds = 30,
max_depth = 32,
eta = 0.4259741,
gamma = 0,
min_child_weight = 4.413045,
subsample = 1,
colsample_bytree=0.81
)
model_list <- caretList(
Survived~., data=Train1,
trControl=train.control,
tuneList=list(xgbTree=caretModelSpec(method="xgbTree", tuneGrid=grid_default,preProcess = c("center","scale")),
svm=caretModelSpec(method="svmLinear",  preProcess = c("center","scale"),tuneGrid=data.frame(svm$bestTune)),
knn=caretModelSpec(method="knn",  preProcess = c("center","scale"),tuneGrid=data.frame(knnFit$bestTune))))
#rf=caretModelSpec(method="rf", tuneGrid=data.frame(rf$bestTune))))
#
#Make a greedy ensemble - currently can only use RMSE
glm_ensemble <- caretStack(
model_list,
method="glm",
metric="Accuracy",
trControl=trainControl(method='cv',
number=10,
savePredictions = "final",
classProbs=TRUE,
index=createResample(Train1$Survived)))
glm_ensemble$models
glm_ensemble$ens_model
glm_ensemble$ens_model$finalModel
confusionMatrix(predict(glm_ensemble,Test1),Test1$Survived)#0.8315
ctest<-read.csv('C:\\Users\\nigel\\Desktop\\titanic\\data\\test.csv',header=T)
x<-ctest
ctest<-ig.data[892:1309,]
ctest$Sex[which(ctest$Sex=="male")]<-1
ctest$Sex[which(ctest$Sex=="female")]<-0
ctest$Sex<-as.numeric(ctest$Sex)
pred<-predict(glm_ensemble ,ctest)
#pred<-predict(svm ,ctest)
result<-cbind(x,pred)
result[which(result$Sex=="male"&result$pred=="Save"),]
nrow(result[which(result$Sex=="male"&result$pred=="Save"),])
nrow(result[which(result$pred=="Die"),])/nrow(result)
result<-result[,c(1,12)]
result$pred<-apply(result,1,function(x){
if(x[2]=="Die"){
x[2]=0
}
else{
x[2]=1
}
}
)
confusionMatrix(factor(result$pred),factor(ans$Survived))
grid_default <- expand.grid(
nrounds = 20,
max_depth = 32,
eta = 0.4259741,
gamma = 0,
min_child_weight = 4.413045,
subsample = 1,
colsample_bytree=0.81
)
model_list <- caretList(
Survived~., data=Train1,
trControl=train.control,
tuneList=list(xgbTree=caretModelSpec(method="xgbTree", tuneGrid=grid_default,preProcess = c("center","scale")),
svm=caretModelSpec(method="svmLinear",  preProcess = c("center","scale"),tuneGrid=data.frame(svm$bestTune)),
knn=caretModelSpec(method="knn",  preProcess = c("center","scale"),tuneGrid=data.frame(knnFit$bestTune))))
#rf=caretModelSpec(method="rf", tuneGrid=data.frame(rf$bestTune))))
#
#Make a greedy ensemble - currently can only use RMSE
glm_ensemble <- caretStack(
model_list,
method="glm",
metric="Accuracy",
trControl=trainControl(method='cv',
number=10,
savePredictions = "final",
classProbs=TRUE,
index=createResample(Train1$Survived)))
glm_ensemble$models
glm_ensemble$ens_model
glm_ensemble$ens_model$finalModel
confusionMatrix(predict(glm_ensemble,Test1),Test1$Survived)#0.8315
ctest<-read.csv('C:\\Users\\nigel\\Desktop\\titanic\\data\\test.csv',header=T)
x<-ctest
ctest<-ig.data[892:1309,]
ctest$Sex[which(ctest$Sex=="male")]<-1
ctest$Sex[which(ctest$Sex=="female")]<-0
ctest$Sex<-as.numeric(ctest$Sex)
pred<-predict(glm_ensemble ,ctest)
#pred<-predict(svm ,ctest)
result<-cbind(x,pred)
result[which(result$Sex=="male"&result$pred=="Save"),]
nrow(result[which(result$Sex=="male"&result$pred=="Save"),])
nrow(result[which(result$pred=="Die"),])/nrow(result)
result<-result[,c(1,12)]
result$pred<-apply(result,1,function(x){
if(x[2]=="Die"){
x[2]=0
}
else{
x[2]=1
}
}
)
confusionMatrix(factor(result$pred),factor(ans$Survived))
write.csv(result,"result0.8254.csv")
Train1
write.csv(Train,"Trainbest.csv")
write.csv(Test,"Testbest.csv")
View(Train)
svm$bestTune
grid_default
View(glm_ensemble)
confusionMatrix(predictions3,Test1$Survived)#0.8652
confusionMatrix(predict(glm_ensemble,Test1),Test1$Survived)#0.8315
